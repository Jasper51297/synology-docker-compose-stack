version: "3.9"

########################### NETWORKS
networks:
  default:
    driver: bridge
  npm_proxy:
    name: npm_proxy
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.89.0/24

########################### EXTENSION FIELDS
# Helps eliminate repetition of sections

# Common environment values
x-environment: &default-tz-puid-pgid
  TZ: $TZ
  PUID: $PUID
  PGID: $PGID

# Keys common to some of the core services that we always to automatically restart on failure
x-common-keys-core: &common-keys-core
  networks:
    - npm_proxy
  security_opt:
    - no-new-privileges:true
  restart: always

# Keys common to some of the dependent services/apps
x-common-keys-apps: &common-keys-apps
  networks:
    - npm_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped

# Keys common to some of the services in media-services.txt
x-common-keys-media: &common-keys-media
  networks:
    - npm_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"

########################### SERVICES
services:
  ############################# FRONTENDS

  # Nginx Proxy Manager - Reverse Proxy with LetsEncrypt
  npm:
    <<: *common-keys-core
    container_name: nginx-proxy-manager
    image: 'jc21/nginx-proxy-manager:2.10.3'
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.254
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 81
        published: 81
        protocol: tcp
        mode: ingress
    volumes:
      - $DOCKERDIR/appdata/npm/config:/config
      - $DOCKERDIR/appdata/npm/nginx.conf:/etc/nginx/nginx.conf
      - $DOCKERDIR/appdata/npm/letsencrypt:/etc/letsencrypt
      - $DOCKERDIR/appdata/npm/data:/data
    environment:
      DB_SQLITE_FILE: "/config/database.sqlite"
      DISABLE_IPV6: 'true'
    labels:
      - flame.type=app
      - flame.name=nginx proxy manager
      - flame.url=https://npm.$DOMAIN
      - flame.icon=arrow-decision

  # Metabase Dashboard crowdsec info
  dashboard:
    <<: *common-keys-apps
    container_name: metabase
    image: metabase/metabase
    ports:
      - 4000:3000
    environment:
      MB_DB_FILE: /data/metabase.db
      MUID: $PUID
      MGID: 101
      <<: *default-tz-puid-pgid
    depends_on:
      - 'crowdsec'
    volumes:
      - $DOCKERDIR/appdata/metabase:/data
    labels:
      - flame.type=app
      - flame.name=metabase
      - flame.url=https://metabase.$DOMAIN
      - flame.icon=monitor-dashboard

  homebridge:
    image: homebridge/homebridge:latest
    container_name: homebridge
    network_mode: host
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/appdata/homebridge:/homebridge
    logging:
      driver: json-file
      options:
        max-size: "10mb"
        max-file: "1"
    labels:
      - flame.type=app
      - flame.name=homebridge
      - flame.url=https://homebridge.$DOMAIN
      - flame.icon=access-point

  speedtest-tracker:
    <<: *common-keys-apps
    container_name: speedtest-tracker
    ports:
      - '8089:80'
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/speedtest-tracker/config:/config
      - $DOCKERDIR/appdata/speedtest-tracker/web:/etc/ssl/web
    image: 'ghcr.io/alexjustesen/speedtest-tracker:latest'
    labels:
      - flame.type=app
      - flame.name=speedtest-tracker
      - flame.url=https://speedtest.$DOMAIN
      - flame.icon=car-speed-limiter

  # Portainer - WebUI for Containers
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    networks:
      - npm_proxy
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/appdata/portainer/data:/data
    environment:
      - TZ=$TZ
    labels:
      - flame.type=app
      - flame.name=portainer
      - flame.url=portainer.$DOMAIN
      - flame.icon=truck-cargo-container

  # Flame - UI with all running applications
  flame:
    <<: *common-keys-core
    image: pawelmalak/flame:latest
    container_name: flame
    volumes:
      - $DOCKERDIR/appdata/flame/:/app/data
      - /var/run/docker.sock:/var/run/docker.sock # optional but required for Docker integration feature
    ports:
      - 5005:5005
    environment:
      - PASSWORD=${FLAME_PASSWORD}
    restart: unless-stopped

  ############################# DOWNLOADERS

  # sabnzbd - Binary newsgrabber (NZB downloader)
  sabnzbd:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/sabnzbd
    container_name: sabnzbd
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.216
    ports:
      - "6789:6789"
    volumes:
      - $DOCKERDIR/appdata/sabnzbd:/config
      - $DATADIR/storage/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
      HAS_IPV6: false
    labels:
      - flame.type=app
      - flame.name=sabnzbd
      - flame.url=sabnzbd.$DOMAIN
      - flame.icon=cloud-download

  # TransmissionBT - Torrent Downloader
  transmission-vpn:
    image: haugene/transmission-openvpn:latest
    container_name: transmission-vpn
    restart: unless-stopped
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.169
    ports:
      - "9091:9091"
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/transmission-vpn/data:/data
      - $DOCKERDIR/appdata/transmission-vpn/config:/config
      - $DATADIR/storage/downloads:/data/downloads
    environment:
      <<: *default-tz-puid-pgid
      OPENVPN_PROVIDER: PIA
      OPENVPN_USERNAME: $PIA_USERNAME
      OPENVPN_PASSWORD: $PIA_PASSWORD
      LOCAL_NETWORK: "$LOCAL_NETWORK"
      UMASK_SET: 2
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "true"
      TRANSMISSION_RPC_HOST_WHITELIST: "127.0.0.1,$SERVER_IP"
      TRANSMISSION_RPC_PASSWORD: ${TRANSMISSION_RPC_PASSWORD}
      TRANSMISSION_RPC_USERNAME: ${TRANSMISSION_RPC_USERNAME}
      TRANSMISSION_UMASK: 002
      TRANSMISSION_ALT_SPEED_DOWN: 40000
      TRANSMISSION_ALT_SPEED_ENABLED: "false"
      TRANSMISSION_ALT_SPEED_UP: 250
      TRANSMISSION_SPEED_LIMIT_DOWN: 80000
      TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED: "true"
      TRANSMISSION_SPEED_LIMIT_UP: 500
      TRANSMISSION_SPEED_LIMIT_UP_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /data/downloads/torrents/incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /data/downloads/torrents
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /data/downloads/torrents
      LOG_TO_STDOUT: "true"
    labels:
      - flame.type=app
      - flame.name=transmission-vpn
      - flame.url=transmission.$DOMAIN
      - flame.icon=vpn

  ############################# PVRS

  # Radarr - Movie management
  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.164
    ports:
      - "7878:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr:/config
      - $DATADIR/storage/downloads:/data/downloads
      - $DATADIR/storage/media:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - flame.type=app
      - flame.name=radarr
      - flame.url=radarr.$DOMAIN
      - flame.icon=movie-plus

  # Sonarr - TV Shows management
  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.167
    ports:
      - "8989:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - $DATADIR/storage/downloads:/data/downloads
      - $DATADIR/storage/media:/data/media
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - flame.type=app
      - flame.name=sonarr
      - flame.url=sonarr.$DOMAIN
      - flame.icon=movie-plus-outline

  # Readarr - Book management
  readarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    environment:
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/appdata/readarr:/config
      - $DATADIR/storage/downloads:/data/downloads
      - $DATADIR/storage/media:/data/media
    ports:
      - 5757:8787
    labels:
      - flame.type=app
      - flame.name=sonarr
      - flame.url=sonarr.$DOMAIN
      - flame.icon=bookshelf

  # Prowlarr - Indexer Proxy
  prowlarr:
    <<: *common-keys-apps
    image: lscr.io/linuxserver/prowlarr
    container_name: prowlarr
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.162
    ports:
      - "9696:9696"
    volumes:
      - $DOCKERDIR/appdata/prowlarr:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - flame.type=app
      - flame.name=prowlarr
      - flame.url=prowlarr.$DOMAIN
      - flame.icon=cloud-search

  # More indexing, specialised for dutch content
  # Stopped working for me using env variables. Have to reconfigure
  # after EVERY restart now. Check container documentation for instructions
  spotweb:
    <<: *common-keys-apps
    image: jgeusebroek/spotweb
    container_name: spotweb
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.163
    environment:
      <<: *default-tz-puid-pgid
      SPOTWEB_DB_TYPE: pdo_mysql
      SPOTWEB_DB_HOST: 192.168.89.160
      SPOTWEB_DB_PORT: 3306
      SPOTWEB_DB_NAME: ${SPOTWEB_DB}
      SPOTWEB_DB_USER: ${SPOTWEB_USER}
      SPOTWEB_DB_PASS: ${SPOTWEB_PASSWORD}
      SPOTWEB_CRON_RETRIEVE: "* */2 * * *"
    depends_on:
     - mariadb
    ports:
     - 9695:80
    labels:
    - flame.type=app
    - flame.name=spotweb
    - flame.url=spotweb.$DOMAIN
    - flame.icon=cloud-search

  ############################# MEDIA
  # Airsonic Advanced - Music Server
  airsonic:
    <<: *common-keys-media
    image: lscr.io/linuxserver/airsonic-advanced
    container_name: airsonic-advanced
    ports:
      - "4040:4040"
      - "4041:4041" #UPnp
    volumes:
      - $DOCKERDIR/appdata/airsonic/podcasts:/data/podcasts
      - $DOCKERDIR/appdata/airsonic/playlists:/data/playlists
      - $DOCKERDIR/appdata/airsonic/config:/config
      - $DATADIR/storage/media/Music:/data/music
    environment:
      <<: *default-tz-puid-pgid
      JAVA_OPTS: '-Dserver.forward-headers-strategy=native' # Optional - if you use a reverse-proxy
    labels:
      - flame.type=app
      - flame.name=airsonic
      - flame.url=airsonic.$DOMAIN
      - flame.icon=music

  # Jellyfin - Media Server
  jellyfin:
    <<: *common-keys-media
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    devices:
      - /dev/dri:/dev/dri # for harware transcoding
    ports:
      - "8096:8096"
    environment:
      <<: *default-tz-puid-pgid
      UMASK_SET: 022
    volumes:
      - $DOCKERDIR/appdata/jellyfin:/config
      - $DATADIR/storage/temp/appdata/jellyfin/metadata:/config/metadata
      - $DATADIR/storage/downloads:/data/downloads
      - $DATADIR/storage/downloads/torrents:/data/downloads/torrents
      - $DATADIR/storage/media:/data/media
      - /dev/shm:/data/transcode # Offload transcoding to RAM if you have enough RAM
      - $DOCKERDIR/appdata/jellyfin-web-interface/dist:/jellyfin/jellyfin-web:ro # Only add this if you are using the intro skipper plugin. Instructions can be found in their Github repo
    labels:
      - flame.type=app
      - flame.name=jellyfin
      - flame.url=jellyfin.$DOMAIN
      - flame.icon=television

  ############################# MEDIA FILE MANAGEMENT

  # Bazarr - Subtitle Management
  bazarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    ports:
      - "6767:6767"
    volumes:
      - $DOCKERDIR/appdata/bazarr:/config
      - $DATADIR/storage/media:/data/media
    environment:
      <<: *default-tz-puid-pgid
    labels:
      - flame.type=app
      - flame.name=bazarr
      - flame.url=bazarr.$DOMAIN
      - flame.icon=subtitles

  # Whisper - Subtitle generation
  # Use an AI model to create English subtitles. Can be translated
  # to other languages using Google Translate
  whisper:
    <<: *common-keys-media
    image: onerahmet/openai-whisper-asr-webservice
    container_name: whisper
    ports:
      - "8000:9000"
    volumes:
      - $DOCKERDIR/appdata/whisper/cache-whisper:/root/.cache/whisper
      - $DOCKERDIR/appdata/whisper/cache-faster-whisper:/root/.cache/faster_whisper
    environment:
      <<: *default-tz-puid-pgid
      ASR_MODEL: base

  # Ombi - Request movies/series
  ombi:
    <<: *common-keys-media
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    environment:
      <<: *default-tz-puid-pgid
      BASE_URL: /ombi
    volumes:
      - $DOCKERDIR/appdata/ombi:/config
    ports:
      - 3579:3579
    restart: unless-stopped
    labels:
      - flame.type=app
      - flame.name=ombi
      - flame.url=ombi.$DOMAIN
      - flame.icon=file-question-outline

  ############################# UTILITIES

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    <<: *common-keys-apps
    image: amir20/dozzle:latest
    container_name: dozzle
    networks:
      - npm_proxy
    ports:
      - "8080:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
      DOZZLE_FILTER: "status=running"
      DOZZLE_USERNAME: ${DOZZLE_USERNAME}
      DOZZLE_PASSWORD: ${DOZZLE_PASSWORD}
      # DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - flame.type=app
      - flame.name=dozzle
      - flame.url=dozzle.$DOMAIN
      - flame.icon=bug

  # Visual Studio Code
  code-server:
    <<: *common-keys-core
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      <<: *default-tz-puid-pgid
      HASHED_PASSWORD: ${VSCODE_HASHED_PASSWORD}
      SUDO_PASSWORD_HASH: ${VSCODE_SUDO_PASSWORD_HASH}
    volumes:
      - $DOCKERDIR/appdata/code-server:/config
    ports:
      - 8443:8443
    restart: unless-stopped
    labels:
      - flame.type=app
      - flame.name=vscode
      - flame.url=vscode.$DOMAIN
      - flame.icon=file-code

  # Ad Guard Home
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    security_opt:
    - no-new-privileges:true
    restart: always
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
      - target: 784
        published: 784
        protocol: udp
        mode: host
      - target: 853
        published: 853
        protocol: tcp
        mode: host
      - target: 3000
        published: 3000
        protocol: tcp
        mode: host
      - target: 80
        published: 60
        protocol: tcp
        mode: ingress
    volumes:
      - $DOCKERDIR/appdata/adguardhome/work:/opt/adguardhome/work
      - $DOCKERDIR/appdata/adguardhome/conf:/opt/adguardhome/conf
    labels:
      - flame.type=app
      - flame.name=adguard
      - flame.url=adguard.$DOMAIN
      - flame.icon=dns

  # Docker-GC - Automatic Docker Garbage Collection
  # Create docker-gc-exclude file
  dockergc:
    <<: *common-keys-apps
    image: clockworksoul/docker-gc-cron:latest
    container_name: docker-gc
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $DOCKERDIR/appdata/docker-gc/docker-gc-exclude:/etc/docker-gc-exclude # Create empty file
    environment:
      CRON: 0 0 0 * * ? # Everyday at midnight. Previously 0 0 * * *
      FORCE_IMAGE_REMOVAL: 1
      FORCE_CONTAINER_REMOVAL: 0
      GRACE_PERIOD_SECONDS: 604800
      DRY_RUN: 0
      CLEAN_UP_VOLUMES: 1
      TZ: $TZ

  # WatchTower - Automatic Docker Container Updates
  watchtower:
    <<: *common-keys-core
    image: containrrr/watchtower
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      TZ: $TZ
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_REMOVE_VOLUMES: "true"
      WATCHTOWER_INCLUDE_STOPPED: "true"
      WATCHTOWER_NO_STARTUP_MESSAGE: "false"
      WATCHTOWER_SCHEDULE: "0 30 12 * * *" # Everyday at 12:30
      DOCKER_API_VERSION: "1.40"

  # Database
  mariadb:
    <<: *common-keys-core
    image: linuxserver/mariadb
    container_name: mariadb
    networks:
      npm_proxy:
        ipv4_address: 192.168.89.160
    environment:
     <<: *default-tz-puid-pgid
     MYSQL_ROOT_PASSWORD:  ${MYSQL_PASSWORD}
     MYSQL_DATABASE: ${SPOTWEB_DB}
     MYSQL_USER: ${SPOTWEB_USER}
     MYSQL_PASSWORD: ${SPOTWEB_PASSWORD}
    volumes:
     - $DOCKERDIR/appdata/mariadb:/config
    ports:
     - 3306:3306

  # Crowdsec to detect attacks
  crowdsec:
   <<: *common-keys-core
   container_name: crowdsec
   image: crowdsecurity/crowdsec
   restart: always
   environment:
      CROWDSEC_USER: $CROWDSEC_USER
      CROWDSEC_PASSWORD: $CROWDSEC_PASSWORD
      CROWDSEC_DB: $CROWDSEC_DB
      COLLECTIONS: "crowdsecurity/nginx-proxy-manager"
      <<: *default-tz-puid-pgid
   depends_on:
     - npm
     - mariadb
   volumes:
     - $DOCKERDIR/appdata/crowdsec/acquis.d:/etc/crowdsec/acquis.d
     - $DOCKERDIR/appdata/npm/data/logs:/var/log/nginx
     - $DOCKERDIR/appdata/crowdsec/config:/etc/crowdsec

  ############################# Reddit replacements
  # Reddit replacement Teddit (based on old.reddit)
  teddit:
    <<: *common-keys-apps
    container_name: teddit
    image: teddit/teddit:latest
    environment:
      DOMAIN: old.reddit.$DOMAIN
      USE_HELMET: true
      TRUST_PROXY: true
      REDIS_HOST: teddit-redis
      <<: *default-tz-puid-pgid
    ports:
      - "1111:8080"
    depends_on:
      - teddit-redis
    labels:
      - flame.type=app
      - flame.name=old.reddit
      - flame.url=https://old.reddit.$DOMAIN
      - flame.icon=reddit

  teddit-redis:
    <<: *common-keys-core
    container_name: teddit-redis
    image: redis:6.2.5-alpine
    command: redis-server
    environment:
      REDIS_REPLICATION_MODE: master
      <<: *default-tz-puid-pgid
    volumes:
      - $DOCKERDIR/appdata/teddit-redis:/data

  # Libreddit (based on new UI)
  libreddit:
    <<: *common-keys-apps
    image: libreddit/libreddit:latest
    container_name: "libreddit"
    ports:
      - 1112:8080
    read_only: true
    environment:
      <<: *default-tz-puid-pgid
      LIBREDDIT_DEFAULT_COMMENT_SORT: top
      LIBREDDIT_DEFAULT_SHOW_NSFW: "on"
      LIBREDDIT_DEFAULT_USE_HLS: "on"
      LIBREDDIT_DEFAULT_SUBSCRIPTIONS: superstonk+tifu+europe+funny+steamdeck+wallstreetbets+MaliciousCompliance+ProRevenge+TheLastAirbender+NatureIsFuckingLit+Instant_regret+todayilearned+nextfuckinglevel+AskReddit+gaming+movies+LifeProTips+pcmasterrace+NetflixBestOf+BikiniBottomTwitter+2westerneurope4u+sipstea+TheNetherlands+Holup+technicallythetruth
    labels:
      - flame.type=app
      - flame.name=reddit
      - flame.url=reddit.$DOMAIN
      - flame.icon=reddit

  ############################# Fun stuff
  # Karaoke
  karaoke-eternal:
    <<: *common-keys-apps
    image: radrootllc/karaoke-eternal:latest
    container_name: karaoke-eternal
    volumes:
      - $DOCKERDIR/appdata/karaoke/config:/config
      - $DATADIR/storage/media/Karaoke:/mnt/karaoke
    ports:
      - 8030:8080
    labels:
      - flame.type=app
      - flame.name=karaoke
      - flame.url=karaoke.$DOMAIN
      - flame.icon=microphone

  ############################# Finance
  # Firefly
  firefly:
    <<: *common-keys-apps
    image: fireflyiii/core:latest
    container_name: firefly
    volumes:
      - $DOCKERDIR/appdata/firefly/upload:/var/www/html/storage/upload
    ports:
      - '8010:8080'
    depends_on:
      - mariadb
    environment:
      <<: *default-tz-puid-pgid
      APP_KEY: ${FIREFLY_SECRET}
      DB_CONNECTION: mysql
      DB_HOST: 192.168.89.160
      DB_PORT: 3306
      DB_DATABASE: ${FIREFLY_DB}
      DB_USERNAME: ${FIREFLY_DB_USER}
      DB_PASSWORD: ${FIREFLY_DB_PASSWORD}
      TRUSTED_PROXIES: "**"
    labels:
      - flame.type=app
      - flame.name=firefly
      - flame.url=firefly.$DOMAIN
      - flame.icon=currency-eur

  # Firefly Importer
  firefly_importer:
    <<: *common-keys-apps
    image: fireflyiii/data-importer:latest
    container_name: firefly_importer
    ports:
      - '8009:8080'
    environment:
      <<: *default-tz-puid-pgid
      FIREFLY_III_URL: https://firefly.${DOMAIN}
      FIREFLY_III_ACCESS_TOKEN: ${FIREFLY_ACCESS_TOKEN}
      NORDIGEN_ID: ${FIREFLY_NORDIGEN_ID}
      NORDIGEN_KEY: ${FIREFLY_NORDIGEN_KEY}
      AUTO_IMPORT_SECRET: ${FIREFLY_SECRET}
      CAN_POST_AUTOIMPORT: true
    depends_on:
      - firefly